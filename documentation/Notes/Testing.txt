Testing Flask Applications

Flask provides a way to test your application by exposing the Werkzeug test CLIENT
and handling the context locals for you. You can then use that with your favorite 
testing solution. 

The flask documentation will use unittest package

The Testing Skeleton:

import os
import flaskr
import unittest
import tempfile

class FlaskrTestCase(unittest.TestCase):

    def setUp(self):
        self.db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()
        flaskr.app.testing = True
        self.app = flaskr.app.test_client()
        with flaskr.app.app_context():
            flaskr.init_db()

    def tearDown(self):
        os.close(self.db_fd)
        os.unlink(flaskr.app.config['DATABASE'])

if __name__ == '__main__':
    unittest.main()

The code in the setUp() method creates a new test client and initializes a new database.
The function is called before each individual test function is run.

To delete the database after the test, we close the file and remove it from the 
filesystem in the tearDown() method.

Additionally during setup the TESTING config flag is activated.

What is does it disable the error catching during request handling so that you get
better error reports when performing test requests against the application.

This test client will give us a simple interface to the application. We can trigger
test requests to the application, and the client will also keep track of cookies for us

Because SQLlite3 is filesystem-based we can easily use the tempfile module to create
a temporary database and initialize it. 

The mkstemp() function does two things for us:
1) it returns a low-level file handle and a random file name 
2) the latter we use as database name

We just have to keep the db_fd around so that we can use the os.close() function to close the file

then we run python flaskr_tests.py

we run the skeleton and it should return:
Ran 0 tests in 0.000s
OK

Since we're running the skeleton, we didn't run any actual tests, we run it to know
our flaskr application is syntactically valid


THE FIRST TEST:

We start testing with the root of the application: (/)
To do this, we add a new test method to our class, like this:

class FlaskrTestCase(unittest.TestCase):

    def setUp(self):
        self.db_fd, flaskr.app.config['DATABASE'] = tempfile.mkstemp()
        flaskr.app.testing = True
        self.app = flaskr.app.test_client()
        with flaskr.app.app_context():
            flaskr.init_db()

    def tearDown(self):
        os.close(self.db_fd)
        os.unlink(flaskr.app.config['DATABASE'])

    def test_empty_db(self):
        rv = self.app.get('/')
        assert b'No entries here so far' in rv.data

We added a new test, test_empty_db :
We need our test functions to begin with the word "test"
This allows unittest to automatically identify the method as a test to run

By using self.app.get we can send an HTTP GET request to the application
with the given path. The return value will be a response_class object

We can now use the data attribute to inspect the return value (as string)
from the application. In this case, we ensure that "no entres here so far" is part of the output

the output:

$ python flaskr_tests.py
.
----------------------------------------------------------------------
Ran 1 test in 0.034s

OK

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We need to test logging in and out:
To do this we fire some requests to the login and log out pages
with the required form data (username and password)
And because the login and logout pages redirect, we tell the 
client to: follow_redirects

** these functions go inside of the FlaskrTestCase class

def login(self, username, password):
    return self.app.post('/login', data=dict(
        username=username,
        password=password
    ), follow_redirects=True)

def logout(self):
    return self.app.get('/logout', follow_redirects=True)

** This lets us test that logging in and out works and that it
   fails with invalid credentials

We add this:

   def test_login_logout(self):
    rv = self.login('admin', 'default')
    assert b'You were logged in' in rv.data
    rv = self.logout()
    assert b'You were logged out' in rv.data
    rv = self.login('adminx', 'default')
    assert b'Invalid username' in rv.data
    rv = self.login('admin', 'defaultx')
    assert b'Invalid password' in rv.data

Add some Test Adding Messages:

    def test_messages(self):
    self.login('admin', 'default')
    rv = self.app.post('/add', data=dict(
        title='<Hello>',
        text='<strong>HTML</strong> allowed here'
    ), follow_redirects=True)
    assert b'No entries here so far' not in rv.data
    assert b'&lt;Hello&gt;' in rv.data
    assert b'<strong>HTML</strong> allowed here' in rv.dat

    Here we check that HTML is allowed in the text but not in the title
    which is the intended behavior

    Running the test should give us three passing tests:

    $ python flaskr_tests.py
    ...
    ----------------------------------------------------------------------
    Ran 3 tests in 0.332s

    OK


<!--
{% block content %}
  <main class="container signup-section">
    <div class="section-content">
      <h2>Log in</h2>

      <form action="/login" method="POST">
        {{ form.hidden_tag() }}

        <div>
          {{ form.email.label }}

          {% if form.email.errors %}
            {% for error in form.email.errors %}
              {{ error }}
            {% endfor %}
          {% endif %}

          {{ form.email }}
        </div>


        <div>
          {{ form.password.label }}

          {% if form.password.errors %}
            {% for error in form.password.errors %}
              {{ error }}
            {% endfor %}
          {% endif %}
          
          {{ form.password }}
        </div>

        {{ form.submit(class="btn btn-primary") }}
      </form>
    </div>
  </main>
{% endblock %}
-->

this is for layout.html

    <!-- "col-sm-8 mx-auto"
    {% with messages = get_flashed_messages() %} {% if messages %} {% for message in messages %}
    <div class="alert alert-dark">
        {{ message }}
    </div>
    {% endfor %} {% endif %} {% endwith %} {% block content %} {% endblock %}
    -->













